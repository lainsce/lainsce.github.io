/*****************
*    MIXINS     *
*****************/
$mobile: "and (min-width: 320px) and (max-width: 767px)";
$tablet: "and (min-width: 768px) and (max-width: 1023px)";
$desktop: "and (min-width: 1024px)";

@mixin prefixer($property, $prefixes, $value: false) {
    @each $prefix in $prefixes {
        @if $prefix == webkit {
            -webkit-#{$property}: $value;
        } @else if $prefix == moz {
            -moz-#{$property}: $value;
        } @else if $prefix == ms {
            -ms-#{$property}: $value;
        } @else if $prefix == o {
            -o-#{$property}: $value;
        } @else if $prefix == spec {
            #{$property}: $value;
        } @else  {
            @warn "Unrecognized prefix: #{$prefix}";
        }
    }
}

@mixin box-sizing($box) {
    @include prefixer(box-sizing, webkit moz ms o spec, $box);
}

@import url('https://fonts.googleapis.com/css?family=Archivo:400,400i,700&display=swap');
@import url('https://fonts.googleapis.com/css?family=Archivo Thin:400,400i,700&display=swap');
@mixin font($size: false, $color: false, $weight: false,  $lh: false) {
    font-family: "Archivo", Helvetica, Arial, sans-serif;
    @if $size { font-size: $size; }
    @if $color { color: $color; }
    @if $weight { font-weight: $weight; }
    @if $lh { line-height: $lh; }
}

@mixin medium-font($size: false, $color: false, $weight: false,  $lh: false) {
    font-family: "Roboto", Georgia, Times, serif;
    @if $size { font-size: $size; }
    @if $color { color: $color; }
    @if $weight { font-weight: $weight; }
    @if $lh { line-height: $lh; }
}

@function legacy-direction($value) {
    @if is-direction($value) == false {
        @warn "Cannot convert `#{$value}` to legacy syntax because it does not seem to be a direction.";
    }
    $conversion-map: (
    to top: bottom,
    to top right: bottom left,
    to right top: left bottom,
    to right: left,
    to bottom right: top left,
    to right bottom: left top,
    to bottom: top,
    to bottom left: top right,
    to left bottom: right top,
    to left: right,
    to left top: right bottom,
    to top left: bottom right
    );
    @if map-has-key($conversion-map, $value) {
        @return map-get($conversion-map, $value);
    }
    @return 90deg - $value;
}

@function is-direction($value) {
    $is-angle: type-of($value) == "number" and index("deg" "grad" "turn" "rad", unit($value));
    $is-keyword: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
    @return $is-keyword or $is-angle;
}

@mixin linear-gradient($direction, $color-stops...) {
    // Direction has been omitted and happens to be a color-stop
    @if is-direction($direction) == false {
        $color-stops: $direction, $color-stops;
        $direction: 180deg;
    }
    background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
    background-color: nth(nth($color-stops, 1), 1);
    @include prefixer(background, moz ms o spec, linear-gradient($direction, $color-stops));
}

@mixin box_shadow ($level, $color: false) {
    @include prefixer(box-shadow, webkit moz ms o spec, $color);
    @if $level == 1 {
        box-shadow: 0 1px 3px $color, 0 1px 2px $color;
    } @else if $level == 2 {
        box-shadow: 0 3px 6px $color, 0 3px 6px $color;
    } @else if $level == 3 {
        box-shadow: 0 10px 20px $color, 0 6px 6px $color;
    } @else if $level == 4 {
        box-shadow: 0 14px 28px $color, 0 10px 10px $color;
    } @else if $level == 5 {
        box-shadow: 0 19px 38px $color, 0 15px 12px $color;
    } @else if $level == -1 {
        box-shadow: 0 -1px 3px $color, 0 -1px 2px $color;
    } @else if $level == -2 {
        box-shadow: 0 -3px 6px $color, 0 -3px 6px $color;
    }
}
